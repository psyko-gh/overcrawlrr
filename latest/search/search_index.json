{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overcrawlrr","text":"<p>A CRON based job, using the power of Overseerr, to automatically requests movies you may like using your own rules.</p> <p>Danger</p> <p>Overcrawlrr is still in BETA.</p> <p>If you find an issue, please submit an issue on Github.</p>"},{"location":"additional/","title":"Schema","text":"<p>The JSON Schema is available here: https://github.com/psyko-gh/overcrawlrr/blob/master/schema/schema.json</p> <p>This is particularly helpful if you are using and editor that support JSON Schema to help you validate your configuration.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Overcrawlrr configuration is defined in the <code>settings.yaml</code> searched by default in the <code>/config/</code> folder</p> <p>Hot reload</p> <p>The configuration is automattically reloaded when a change is detected</p>"},{"location":"configuration/#overseerr-authentication","title":"Overseerr authentication","text":"<p>Overcrawlrr need to authenticate to Overseerr to fetch movie information and create movie requests.</p> <p>It is recommended to create a local user in Overseerr dedicated to Overcrawlrr. Doing so, you can have fine-grained control on its permissions:</p> <ul> <li>Allow/deny automatic requests validation,</li> <li>Allow/deny to request in 4K,</li> <li>Specify the languages and the region when discovering movies,</li> <li>And more...</li> </ul> <p>Once the user is created, you can fill these value in Overcrawlrr <code>settings.yaml</code>: settings.yaml<pre><code>  config:\n    overseerr:\n      apiUrl: xxx    # required\n      user: xxx      # required\n      password: xxx  # required\n      dryRun: true   # Optional - dryRun will not send requests to Overseerr\n      #            allowing you to test your rules\n</code></pre></p>"},{"location":"configuration/#plex-authentication","title":"Plex authentication","text":"<p>Note</p> <p>This authentication is optional and only required if you're using the Smart Recommendations job</p> <p>To read data from your Plex library, you have to specify your Plex URL and token in <code>settings.yaml</code>: settings.yaml<pre><code>  config:\n    # Only required when using Smart recommendations job\n    plex:\n        apiUrl: xxx\n        plexToken: xxx\n</code></pre></p>"},{"location":"configuration/#using-environment-variables","title":"Using environment variables","text":"<p>You can refer to environment variables using the <code>{{ key }}</code> syntax. settings.yaml<pre><code>  config:\n    overseerr:\n      apiUrl: xxx\n      user: '{{ OVERSEERR_USER }}'\n      password: '{{ OVERSEERR_PASSWORD }}'\n</code></pre></p> <p>These variables can be defined in the <code>docker-compose.yaml</code></p> docker-compose.yaml<pre><code>services:\n  overcrawlrr:\n    # ...\n    environment:\n      - OVERSEERR_USER=\n      - OVERSEERR_PASSWORD=\n</code></pre> <p>You can now configure the jobs you want to use to discover movies</p>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>Using Overcrawlrr requires you to have a running instance of Overseerr</p> <p>With docker-compose</p> <pre><code>services:\n  overcrawlrr:\n    image: ghcr.io/psyko-gh/overcrawlrr:latest\n    container_name: overcrawlrr\n    restart: unless-stopped\n    ports:\n      - 5056:5056\n    environment:\n      - OVERSEERR_USER=\n      - OVERSEERR_PASSWORD=\n    volumes:\n      - /path/to/config:/config\n</code></pre> <p>With docker cli</p> <pre><code>docker run -d \\\n  --name=overcralwrr \\\n  --restart=unless-stopped \\\n  -e OVERSEERR_USER= \\\n  -e OVERSEERR_PASSWORD= \\\n  -v /path/to/config:/config \\\n  ghcr.io/psyko-gh/overcrawlrr:latest\n</code></pre> Using edge image <p>To uses latest non-released features and fixes, you can use the image <code>ghcr.io/psyko-gh/overcrawlrr:edge</code></p> <p>As an <code>edge</code> build, it can contains bugs and errors</p>"},{"location":"jobs/","title":"Jobs","text":"<p>You can validate your CRON expressions using Crontab by Cronhub</p>"},{"location":"jobs/#discovery-job","title":"Discovery job","text":"<p>It's time to configure the discovery job.</p> <p>It will fetch movies from Overseerr (from the upcoming/popular/trending sections) and evaluate each of them.</p> settings.yaml<pre><code>config:\n  overseer:\n    # ....\n  discovery:\n    # Required\n    cron: '30 3 * * *'\n    # Required - the overseer streams to search through\n    # Possible values: upcoming, popular, trending\n    streams:\n      - upcoming\n      - popular\n      - trending\n    # Required - the name of the ruleset used to evaluate movies\n    ruleset: Ruleset name\n</code></pre>"},{"location":"jobs/#smart-recommendations","title":"Smart recommendations","text":"<p>Note</p> <p>The implementation of this job is still a work in progress</p> <p>This job uses your personal ratings in your Plex library to scan movies you may like.</p> <p>Considering the movie you liked, it will crawl their recommended movies and apply the given ruleset.</p> settings.yaml<pre><code>config:\n  plex:\n  # ....\n  smartRecommendations:\n    # Required\n    cron: '1 14 * * *'\n    # The name of the plex library to use as a seed\n    plexLibrary: Films\n    # Your minimum personal rating to consider\n    minimumRating: 6.9\n    ruleset: Ruleset name\n</code></pre>"},{"location":"jobs/#checking-output","title":"Checking output","text":"<p>Evaluation of the jobs are displayed in the container log. If you named your service <code>overcrawlrr</code>, you can see it with the following command:</p> <pre><code>docker logs overcrawlrr --follow\n</code></pre>"},{"location":"predicates/","title":"Predicates","text":""},{"location":"predicates/#adult","title":"<code>adult</code>","text":"<p>Filters on the adult status of the movie.</p> <pre><code>    - adult: yes\n      # or\n    - adult: no\n</code></pre>"},{"location":"predicates/#age","title":"<code>age</code>","text":"<p>Filters on the age of the movie.</p> <p>See Duration expressions for more details</p> <pre><code>    - age: less than 2 years\n      # or\n    - age: more than 6 months\n</code></pre>"},{"location":"predicates/#and","title":"<code>and</code>","text":"<p>Predicate that will match if all of its predicate matches</p> <pre><code>    # Will match if the movie is less than 2 years old AND if the movie genre is 'animation'\n    - and:\n        - age: less than 2 years\n        - genre:\n            - animation\n</code></pre>"},{"location":"predicates/#cast","title":"<code>cast</code>","text":"<p>Filters based on the cast of the movie. Will match when one or more of the listed name matches.</p> <p>Case insensitive</p> <pre><code>    - cast:\n        - Denzel Washington\n        - Jessica Alba\n</code></pre>"},{"location":"predicates/#crew","title":"<code>crew</code>","text":"<p>Filters based on the crew of the movie. Will match when one or more of the listed name matches.</p> <p>Case insensitive</p> <pre><code>    - crew:\n        - James Cameron\n        - Hans Zimmer\n</code></pre> <p>It is also possible to specify the job <pre><code>    - crew:\n        job: director\n        names:\n          - James Cameron\n          - Steven Spielberg\n</code></pre></p>"},{"location":"predicates/#genre","title":"<code>genre</code>","text":"<p>Filters on the genre of the movie. Will match when one or more of the listed genres matches the genre of the movie.</p> <p>Case insensitive</p> <pre><code>    - genre: musical\n    # or with an array of values\n    - genre:\n        - animation\n        - romance\n</code></pre>"},{"location":"predicates/#not","title":"<code>not</code>","text":"<p>Predicate that invert the result of its child predicate</p> <pre><code>    - not:\n        - genre:\n            - animation\n</code></pre>"},{"location":"predicates/#originallanguage","title":"<code>originalLanguage</code>","text":"<p>Filters on the original language of the movie</p> <p>Case insensitive</p> <pre><code>    # ISO 639-1 format of the language (de, au, us, fr...)\n    - originalLanguage: en\n    # or with an array of values\n    - originalLanguage:\n        - en\n        - fr\n</code></pre>"},{"location":"predicates/#or","title":"<code>or</code>","text":"<p>Predicate that will match if any of its predicate matches</p> <pre><code>    # Will match if the movie is less than 2 years old OR if the movie score is above 8\n    - or:\n        - age: less than 2 years\n        - score: above 8\n</code></pre>"},{"location":"predicates/#productioncompany","title":"<code>productionCompany</code>","text":"<p>Filters based on the production companies of the movie. Will match when one or more of the listed company matches.</p> <p>Case insensitive</p> <pre><code>    - productionCompany:\n        - 20th Century Fox\n        - Warner Bros. Pictures\n        - Twisted Pictures\n</code></pre>"},{"location":"predicates/#released","title":"<code>released</code>","text":"<p>Filters on the released status of the movie.</p> <pre><code>    - released: yes\n      # or\n    - released: no\n</code></pre>"},{"location":"predicates/#runtime","title":"<code>runtime</code>","text":"<p>Filters on the runtime (duration) of the movie.</p> <p>See Duration expressions for more details</p> <pre><code>    - runtime: less than 2.5 hours\n      # or\n    - runtime: more than 120 minutes\n</code></pre>"},{"location":"predicates/#score","title":"<code>score</code>","text":"<p>Filters on the score of the movie.</p> <p>Overseerr score is expressed between 0 to 10, but to make things clear, it is possible to pass the score as a fractional number.</p> <pre><code>    - score: above 6.5\n      # or\n    - score: below 75/100 # Would be the same as 7.5, 7.5/10 or even 750/1000\n</code></pre>"},{"location":"predicates/#status","title":"<code>status</code>","text":"<p>Filters on the status of the movie.</p> <p>The possible values are the one provided by TMDB: <code>rumored</code>, <code>planned</code>, <code>in production</code>, <code>post production</code>, <code>released</code>, <code>canceled</code></p> <p>Case insensitive</p> <pre><code>    - status: released\n    # or with an array of values\n    - status:\n        - released\n        - post production\n        - planned\n</code></pre>"},{"location":"predicates/#votecount","title":"<code>voteCount</code>","text":"<p>Filters on the vote count of the movie.</p> <pre><code>    - voteCount: above 1000\n      # or\n    - voteCount: below 100\n</code></pre>"},{"location":"predicates/#watchproviders","title":"<code>watchProviders</code>","text":"<p>Filters based on the available Streaming/VOD platforms. Will match when one or more of the listed provider matches.</p> <p>Case insensitive</p> <pre><code>    # This predicate will match when the movie is available in Germany on Netflix or Amazon Prime\n    - watchProviders:\n          # ISO 3166-1 alpha-2 format of the region (de, au, us, fr...)\n        - region: de\n        - names:\n            - Netflix\n            - Amazon Prime\n</code></pre>"},{"location":"predicates/#duration-expressions","title":"Duration expressions","text":"<p>Duration expressions, like the one used in the <code>age</code> or <code>runtime</code> predicate can be expressed in the following way:</p> <ul> <li>an operator: <code>less than</code> or <code>more than</code></li> <li>a integer or decimal number: <code>2</code> or <code>2.5</code></li> <li>a unit: one of the following <code>year</code>, <code>month</code>, <code>week</code>, <code>day</code>, <code>hour</code>, <code>minute</code>. Singular or plural doesn't matter, so <code>hour</code> is the same as <code>hours</code></li> </ul> <p>The following expressions are valid:</p> <ul> <li><code>less than 1 hour</code>/<code>less than 1 hours</code>/<code>less than 60 minutes</code></li> <li><code>less than 3 hours</code>/<code>less than 3 hour</code>/<code>less than 180 minute</code></li> <li><code>more than 6 month</code></li> </ul>"},{"location":"rulesets/","title":"Rulesets","text":"<p>Rulesets and rules allow you to precisely decide if a movie is worth requesting or not.</p>"},{"location":"rulesets/#rulesets","title":"Rulesets","text":"<p>A ruleset is a named group of rules.</p> settings.yaml<pre><code>config:\n  # ...\n  rulesets:\n      # Required - the name of the ruleset\n    - name: Ruleset name\n      # Optional - the name of another ruleset.\n      #            This ruleset will apply all the rules in the extended ruleset\n      #            before applying its own rules\n      extends: Another ruleset\n      # Required - An array defining the rules of the ruleset\n      rules:\n        - # rule 1\n        - # rule 2\n        - # rule ...\n</code></pre> <ul> <li>The rules are applied in the declared order,</li> <li>When a rule matches, the rule's <code>action</code> is applied, and the evaluation of the ruleset stops.</li> <li>If a rule doesn't match, it is ignored, and the next rule is evaluated.</li> </ul>"},{"location":"rulesets/#rule-definition","title":"Rule definition","text":"<p>A rule is a named group of predicates.</p> <p>A predicate is a simple operation allowing to test the property of a movie.</p> settings.yaml<pre><code>    # Required - the name of the rule\n  - name: The rule name\n    # Required - an array defining the predicates used in the rule\n    whenMatch:\n      - # predicate 1\n      - # predicate 2\n      - # ...\n      - # predicate n\n    # Required - the action to apply when the rule matches\n    # Possible values: accept or reject\n    action: accept\n</code></pre> <p>The rule will match if all the predicates in the <code>whenMatch</code> match.</p> <p>When matching:</p> <ul> <li>If <code>action: accept</code>, a request is sent to Overseerr to add the movie,</li> <li>If <code>action: reject</code>, the movie is ignored, and the evaluation of the ruleset stops for this movie.</li> </ul>"},{"location":"rulesets/#ruleset-extension","title":"Ruleset extension","text":"<p>Using the <code>extends</code> property of a ruleset, you can add rules to an existing ruleset.</p> <p>This is particularly useful for common rejection rules.</p> settings.yaml<pre><code>config:\n  # ...\n  rulesets:\n    - name: exclude-netflix\n      rules:\n        - name: Exclude netflix movies\n          watchProviders:\n            - region: us\n            - names:\n                - Netflix\n      action: reject\n    - name: filter-movies\n      extends: exclude-netflix # movie will be evaluated against exclude-netflix rules first\n      rules:\n        - name: High score\n          whenMatch:\n            - age: less than 1 year\n            - score: above 9/10\n      action: accept\n</code></pre>"},{"location":"rulesets/#ruleset-example","title":"Ruleset example","text":"<p>The following ruleset will:</p> <ol> <li>Reject any animation or romance movie,</li> <li>Request all movies (that went through rule 1) released in the past year, with a score above 7</li> </ol> settings.yaml<pre><code>    rulesets:\n      - name: New great movie\n        rules:\n          - name: Reject less wanted genres\n            whenMatch:\n              - genre:\n                  - animation\n                  - romance\n            action: reject\n          - name: New great movies\n            whenMatch:\n              - age: less than 1 years\n              - score: above 7\n            action: accept\n</code></pre>"}]}